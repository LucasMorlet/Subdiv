// Version du GLSL
#version 430 core

layout ( std430, binding = 1 ) buffer vert
{
    float les_sommets[][3]; // X, Y, Z, W, ++++ R, G, B
};
layout ( std430, binding = 2 ) buffer sdkfjslf
{
    uint indices_patchs[];
 };
 layout ( std430, binding = 3 ) buffer hh
 {
     uint les_patchs[][2];
  };
layout ( std430, binding = 4 ) buffer combinaisons
{
    float combinaisons_barycentriques[];
};
layout ( std430, binding = 5 ) buffer tangentes_u
{
    float t_u[];
};
layout ( std430, binding = 6 ) buffer tangentes_v
{
    float t_v[];
};
layout( quads, equal_spacing, ccw ) in;

patch in vec3 couleur;
patch in vec3 normale_face;
patch in float v, w, x;
patch in float c, d, e;
out vec3 tes_color;
out vec3 tes_normale;

uint calculNumeroCombinaison ( float u, float v )
{
    uint ui = uint(u*32); // [0;16]
    uint vi = uint(v*32); // [0;16]
    return 33*ui + vi;  // [0;17^2[
}

uint calculDepart ( uint taille )
{
    uint depart = 0;
    while ( taille > 8 )
    {
        taille-- ;
        depart += taille;
    }
    return depart * 1089 * 2 * 3; // dépend de la précision max
}

void calculPoint ( uint index_patch, uint size_patch, uint depart, uint numero )
{
    // On initialise vide la position et les tangentes du point de la surface limite
    vec4 point = vec4 ( 0.0f, 0.0f, 0.0f, 0.0f );
    // vec3    tu = vec3 ( 0.0f, 0.0f, 0.0f );
    // vec3    tv = vec3 ( 0.0f, 0.0f, 0.0f );

    // Pour chaque point du patch, on applique sa contribution au point
    for ( int i = 0 ; i < size_patch ; i++ )
    {
        vec4 sommet = vec4 ( les_sommets[indices_patchs[index_patch + i]][0], les_sommets[indices_patchs[index_patch + i]][1], les_sommets[indices_patchs[index_patch + i]][2], 1.0f );
        // Vertical
        point += c * combinaisons_barycentriques[ depart + numero * size_patch * 6 + i * 6 + 0 ] * sommet;
        point += d * combinaisons_barycentriques[ depart + numero * size_patch * 6 + i * 6 + 1 ] * sommet;
        point += e * combinaisons_barycentriques[ depart + numero * size_patch * 6 + i * 6 + 2 ] * sommet;
        // Horizontal
        point += v * combinaisons_barycentriques[ depart + numero * size_patch * 6 + i * 6 + 3 ] * sommet;
        point += w * combinaisons_barycentriques[ depart + numero * size_patch * 6 + i * 6 + 4 ] * sommet;
        point += x * combinaisons_barycentriques[ depart + numero * size_patch * 6 + i * 6 + 5 ] * sommet;
        //tu += t_u[ depart + numero*size_patch + i ] * sommet;
        //tv += t_v[ depart + numero*size_patch + i ] * sommet;
    }

    /*
    // On renseigne les variables dont on va avoir besoin


    if ( length ( tu - tv ) < 0.000001 )
    {
        tes_normale = vec3 ( 1.0, 0.0, 0.0 );
        return;
    }

    vec3 p0 = vec3 ( les_sommets[indices_patchs[index_patch]][0], les_sommets[indices_patchs[index_patch]][1], les_sommets[indices_patchs[index_patch]][2] );
    vec3 p1 = vec3 ( les_sommets[indices_patchs[index_patch + 1]][0], les_sommets[indices_patchs[index_patch + 1]][1], les_sommets[indices_patchs[index_patch + 1]][2] );
    vec3 p3 = vec3 ( les_sommets[indices_patchs[index_patch + 3]][0], les_sommets[indices_patchs[index_patch + 3]][1], les_sommets[indices_patchs[index_patch + 3]][2] );
    vec3 p7 = vec3 ( les_sommets[indices_patchs[index_patch + 7]][0], les_sommets[indices_patchs[index_patch + 7]][1], les_sommets[indices_patchs[index_patch + 7]][2] );
    vec3 new_normale = normalize ( cross ( p7 - p0, p1 - p0 ) );

    //new_normale = normale_face; //checker le calcul de normale once for all DS

    vec3 norm  =  normalize ( cross ( tu, tv ) );
    vec3 norm2 =  normalize ( cross ( tv, tu ) );
    if ( length ( norm - new_normale ) < length ( norm2 - new_normale ) )
    {
        tes_normale = norm;
    }
    else
    {
        tes_normale = norm2;
    }
    //tes_normale = norm2;
    */

    gl_Position =  point / point.w;
}

vec3 calculCouleurPatch ( uint size_patch )
{
    if      ( size_patch == 8  ) return vec3 ( 0.0, 1.0, 0.0 );
    else if ( size_patch == 9  ) return vec3 ( 1.0, 0.0, 0.0 );
    else if ( size_patch == 10 ) return vec3 ( 0.0, 0.0, 1.0 );
    else if ( size_patch == 11 ) return vec3 ( 1.0, 0.0, 1.0 );
    else                         return vec3 ( 0.0, 1.0, 1.0 );
}

void main()
{
    // On récupère les infos du patch
    uint index_patch = les_patchs[gl_PrimitiveID][0];
    uint size_patch  = les_patchs[gl_PrimitiveID][1];

    // On calcule les infos dont on a besoin sur la mémoire
    uint numero = calculNumeroCombinaison ( gl_TessCoord.s, gl_TessCoord.t );
    uint depart = calculDepart ( size_patch );

    // On applique les combinaisons pour calculer la position et la normale en chaque point
    calculPoint  ( index_patch, size_patch, depart, numero );

    // On transmet la couleur
    tes_color = couleur;
    tes_color = calculCouleurPatch ( size_patch );
}
