// Version du GLSL
#version 430 core

layout( vertices = 4 ) out;

uniform uint level;
uniform mat4 MVP;

in vec2 tex_coords[];

out vec2 tex_coords_tes[];
patch out vec3 normale_face;
patch out uint index_patch;
patch out uint size_patch;
patch out vec3 patch_controle[20];
// On est limité par la variable GL_MAX_TESS_PATCH_COMPONENTS

layout ( std430, binding = 1 ) buffer buff_sommets
{
    float les_sommets[][3];   // mettre vec3 plutôt ?
};
layout ( std430, binding = 2 ) buffer buff_indices_patchs
{
    uint indices_patchs[]; // tous les index de sommets à la suite
};
layout ( std430, binding = 3 ) buffer buff_patchs
{
    uint les_patchs[][2]; // début, taille
};


bool inVisibleCube ( vec3 point )
{
    if ( point.x <= -1.0f ) return false;
    if ( point.y <= -1.0f ) return false;
    if ( point.z <=  0.0f ) return false; // -1 ??
    if ( point.x >=  1.0f ) return false;
    if ( point.y >=  1.0f ) return false;
    if ( point.z >=  1.0f ) return false;
    return true;
}

bool testVisible ( void )
{
    // On calcul la position des sommets du maillage de contrôle à l'écran
    vec3 p0 = normalize(MVP * gl_in[0].gl_Position).xyz;
    vec3 p1 = normalize(MVP * gl_in[1].gl_Position).xyz;
    vec3 p2 = normalize(MVP * gl_in[2].gl_Position).xyz;
    vec3 p3 = normalize(MVP * gl_in[3].gl_Position).xyz;

    // On teste si la face est visible : dans le clipping
    return inVisibleCube ( p0 ) || inVisibleCube ( p1 ) || inVisibleCube ( p2 ) || inVisibleCube ( p3 );
}

void main()
{
    if ( gl_InvocationID == 0 ) // Seulement une fois par patch (donc sur le premier sommet)
    {
        // if ( testVisible() )
        if ( true )
        {
            // On affiche le niveau de subdivision désiré
            float subdiv = float( pow ( 2, level ) );

            gl_TessLevelInner[0] = subdiv;
            gl_TessLevelInner[1] = subdiv;

            gl_TessLevelOuter[0] = subdiv;
            gl_TessLevelOuter[1] = subdiv;
            gl_TessLevelOuter[2] = subdiv;
            gl_TessLevelOuter[3] = subdiv;

            index_patch = les_patchs[gl_PrimitiveID][0];
            size_patch  = les_patchs[gl_PrimitiveID][1];
            for ( int i = 0 ; i < size_patch ; i++ )
            {
                patch_controle[i] = vec3 (
                    les_sommets[indices_patchs[index_patch + i]][0],
                    les_sommets[indices_patchs[index_patch + i]][1],
                    les_sommets[indices_patchs[index_patch + i]][2]
                );
            }
            for ( uint i = size_patch ; i < 28 ; i++ )
            {
                patch_controle[i] = vec3 (0.0, 0.0, 0.0);
            }
        }
        else
        {
            // On refuse l'affichage
            gl_TessLevelOuter[0] = 0.0f;
            gl_TessLevelOuter[1] = 0.0f;
            gl_TessLevelOuter[2] = 0.0f;
            gl_TessLevelOuter[3] = 0.0f;

            gl_TessLevelInner[0] = 0.0f;
            gl_TessLevelInner[1] = 0.0f;
        }

        /* Calcul de la normale de la face
        vec3 p0 = gl_in[0].gl_Position.xyz;
        normale_face = normalize ( cross ( gl_in[1].gl_Position.xyz - p0, gl_in[3].gl_Position.xyz - p0 ) ); */
    }
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
    //tex_coords_tes[gl_InvocationID] = tex_coords[gl_InvocationID];
}
